{"layout":{"activeNavigationTab":"project","navigationPanelIsOpen":true,"referencePanelIsOpen":true,"activeSoundTicTab":"volume","tileEditor":{"tileSelectorIsOpen":true,"showGrid":false},"tilemapEditor":{"tilemapSelectorIsOpen":true,"tileSelectorIsOpen":true,"cursorX":0,"cursorY":0,"showGrid":true},"soundEditor":{"pianoOctave":4,"lastVolumeTic":-1,"lastPitchTic":-1,"lastArpTic":-1},"referenceTabTitle":"Motivation","play":{"stickConsoleToBottom":true},"referenceRoutes":{"about":{"current":["REFERENCE_ABOUT"],"cached":{"REFERENCE_ABOUT":["REFERENCE_ABOUT"]}},"project":{"current":["MOTIVATION"],"cached":{"MOTIVATION":["MOTIVATION"]}},"play":{"current":["CONSOLE"],"cached":{"CONSOLE":["CONSOLE"]}},"code":{"current":["API"],"cached":{"API":["API"]}},"tile":{"current":["ARTICLES"],"cached":{"ARTICLES":["ARTICLES"]}},"tilemap":{"current":["ARTICLES"],"cached":{"ARTICLES":["ARTICLES"]}},"sound":{"current":["HOTKEYS"],"cached":{"HOTKEYS":["HOTKEYS"]}},"publish":{"current":["MOTIVATION"],"cached":{"MOTIVATION":["MOTIVATION"]}},"instructions":{"current":["MOTIVATION"],"cached":{"MOTIVATION":["MOTIVATION"]}}},"colorPickerIsOpen":false,"activePage":"EDITOR_PAGE","modalCount":0,"showCircleTileFlags":false},"sound":{"sounds":[{"volumeTics":[9,9,0,0,14,14,0,0,0,0,0,0,0,0,0,0,14,14,0,0,10,10,0,0,0,0,0,0,0,0,0,0],"pitchTics":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"arpTics":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2,-2],"pitchScale":100,"wave":2,"useVolumeLoop":true,"volumeLoopStart":0,"volumeLoopEnd":31,"usePitchLoop":false,"pitchLoopStart":0,"pitchLoopEnd":31,"useArpLoop":true,"arpLoopStart":0,"arpLoopEnd":31,"name":"walk","releaseLength":1,"releaseMode":"linear","needToAddToAudioEngine":false},{"volumeTics":[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],"pitchTics":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"arpTics":[0,0,0,0,1,1,1,1,3,3,3,3,5,5,5,5,7,7,7,7,9,9,9,9,11,11,11,11,8,8,8,8],"pitchScale":100,"wave":2,"useVolumeLoop":false,"volumeLoopStart":0,"volumeLoopEnd":31,"usePitchLoop":false,"pitchLoopStart":0,"pitchLoopEnd":31,"useArpLoop":false,"arpLoopStart":0,"arpLoopEnd":31,"name":"pickup","releaseLength":10,"releaseMode":"linear","needToAddToAudioEngine":false},{"volumeTics":[0,0,1,1,1,2,2,3,3,4,4,5,5,5,6,6,7,7,8,8,8,9,9,10,11,11,12,12,13,14,14,14],"pitchTics":[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"arpTics":[0,0,1,1,2,2,2,2,3,3,3,4,4,4,5,5,6,6,6,7,7,8,8,9,9,9,10,10,11,11,12,12],"pitchScale":100,"wave":0,"useVolumeLoop":false,"volumeLoopStart":0,"volumeLoopEnd":31,"usePitchLoop":false,"pitchLoopStart":0,"pitchLoopEnd":31,"useArpLoop":false,"arpLoopStart":0,"arpLoopEnd":31,"name":"Win","releaseLength":10,"releaseMode":"linear","needToAddToAudioEngine":false},{"volumeTics":[0,0,1,1,2,2,3,3,4,4,5,5,6,6,6,7,7,8,8,8,9,10,11,11,12,12,12,13,13,14,14,15],"pitchTics":[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"arpTics":[12,11,10,9,8,8,7,6,5,4,4,3,2,1,1,0,0,-1,-2,-2,-3,-4,-5,-5,-6,-7,-8,-8,-9,-10,-11,-12],"pitchScale":100,"wave":0,"useVolumeLoop":false,"volumeLoopStart":0,"volumeLoopEnd":31,"usePitchLoop":false,"pitchLoopStart":0,"pitchLoopEnd":31,"useArpLoop":false,"arpLoopStart":0,"arpLoopEnd":31,"name":"Lose","releaseLength":1,"releaseMode":"linear","needToAddToAudioEngine":false}],"activeSound":0,"audioEvents":[],"piano":{"speed":0,"volume":0.75}},"palette":{"colors":["000000","0b0711","eaf2de","766e76","561f6e","7d4f31","e98c49","fbc0a0","f681b2","d83232","e3e962","65cf57","2ba957","187575","1e2cB0","2379e5","95cae5"],"selectedIndex":1,"altIndex":0},"pixelTools":{"selectedTool":"PENCIL_TOOL","selectedTileTool":"TILE_DRAW_TOOL","pixelToolSettings":{"pencilSize":1,"eraserSize":1,"lineSize":1}},"tileset":{"tilesets":[{"name":"untitled","width":8,"height":8,"selectedTile":0,"selectionWidth":1,"selectionHeight":1,"mapSelectedTile":0,"mapSelectionWidth":1,"mapSelectionHeight":1,"activeLayer":0,"layers":[{"isVisible":true,"data":"CwGgDCoIwjHSA7OStbPmqBOFA2WAJlQFYjzQzcpiBmEM6Ces+mkQuENtZtXPjC4IMqISh6EIEZO2Jko0YvNgR2LMX1blCxCMQT6xXA7278JWFKc4pZyhrCUdHUNXUc3V57XL0vDANgTMWtjMMCbLnsXBWcVN3INJh9zORCCUFxiAlEc82zUfIAOMIIYUHpqEAIpOx1XeNd3VJSNNmJStRBqfxhypFRqgeRRfrRkKjQRkC7piaGFupkGuNXvdkTfYlEq4Pwew5XqaRrD2xW5RvXEzYhts-vDxIgCE4P31-OuctMoIQ6sVm5Bg1TurhBz3IZGOR0Gb3qCJWtVOCg8-wsxAxpU2+0BKkBQgqDXeZGIYNMEFwuDyZ1GgyMuUGtKZsgEYk6+xiWJgWIcZIaGLR5EK7FAVMOYzOOys9FkVnp3Vqg3EcqsMEV8xlqpVCtg7Px+1B4WNPJVDgxQgt4iuGJiiVwgPFi2EhwI3XEyvlMDVNvhKD9XuBxI9Wt1PvDCxwYU2Zpi5WN7FKuGcMJcjrCNIDJtQ3RSMDTxMt6Es7AU4hT+1+WAjttrWP2OPyuGF0b4oBxjjUxLT9A7WDmTWLLa5gt5Y5cdeeplw1eWh1AokrS7E7OFCenk5t1qwO8tDiz6XqWWPcOQoHn1egRPIG9sm3dkCbT5Qax44540Ggj+Az9-KC-WUzh1AZa2-AC-0HJxJ3megG1AsRwIgP99mca8OXCNDUIobCxTmNgEBgUoGzA2BH0BctEMw6D0MA2iaLxaCAQw-8jEUdUYPGEi0G4rEkLSEiNWg-FqEIvsKDmIRCMFdV+MJUd2JEpjYHEvDs3Y7dOKwOTITtYSQSkgTnkqFS0jEljJOUq0tMMqAf103k1BM9hRLSVTzKdOY+PVNieKY+zcQxOpFJBJzJ3crB6E80tpIcUBlW4giyIAhzuFc5joswDT5gQwC7JSwKC309hZAvHRvIyiSCtilx8gtNA8vI1KoFK3dTOyqBfXMtCoI6vzxHqgarEa0tBODQjlBxczbNMnrqqsZVxBGwQxtodLZqqp4+rK8Q1nylaazSqzVIMOZylABBzuSrLVvWzqjNY1x8gUNQvimQqVR2hIvuA6arsqtStuejY3s3G9Wr5KjnHukL7v+0zMqes4Xu8Ah3rGmGLpBJKsS6yKHrmddmlRxxnxvbzIctH7dGOizX1vYnEjR4Mxu8wFaDyjbAaR5nxNkUGyf2CmQVcymZvuiqudO+n2F51B+eRlnDsIHHQuK99us2nnGdB3pDtoNZccnDytaJlGmccPWbzW2nEbNkHFato03x0cWotNhnzd11Krsh1r8TdgmZeB24BdSiHyCmtr4bh6CjZjk6XyBxXQ8VwWMVoSXY46xPHuFGmyHTn07tzwnytJ1KbZzunk4LsG8RLhg5xUJ3iw6uhDMhzn7pIZvLdSqPrKptrNh+7uWC784VBPVsjVFkFB-a6z6LFXC-iLdeWKrJIp8cPZZ4zxuYkoyhqMYbDz4xU-0I0ZjuQRasb0NnQ9oZ6v7VHbRahHZjn0IE8P5CjjkkLOvoxqTHMMzBQ0pb6mT1jTXARdkrtw4KA80h0IH0A3F-Q4ODYEwxaHUd4H07rfUnJTCaxl8aAMcnvM4I4sGkHxrcLEyYjS3VpjQtAApyiYOAk8fIp9mL7mSlbDh79mqeDOLQZmwih5mWePJDODF7p0S5ljVRKiIrQHoEgqAZAeGoIhDDay6JyRMVWlLMQucrE6K3iY5qzN8g93mBA4RkN3YOhqJTbe0CCC0C2sBYxhIPDvk5LOJRxdgkglCeQ+hNRoYN2iVAFCs5H5JOgfddmKhj6mX-tCJe4cpFQJcAQWRwFylZJFsU-YZA5wbW9InBQniEi3wtHzZhLRwY1OvsBdoZxKktKYYwsspTalIyNkJHa4YhnMUXEZOZgwhw8HPDBRp9dLTJD6TUtxCMcI4MIAYpGwj-QNlWavP4XhEkw1OQsJBKhnFFTqgkWxdDahHIPiswYlyihbx+Sc+knIPoEmkUIqxmdHCfIWMgH5ZUsL-PasyFw9yanRkMUAri0T4in3yMzdJgK-mEtngS+5GhnFPBGVinQOKBmOHxd8pYMFxJnNqmgZlCw4JsuhemSuRy6rRMJAI6UTx6XjnmfVGFTLflCXquyoSnLay6lMJK8xH0baZNmUKlEdKGirJZWKnCsKgRXD1VGHlH19FvI4EVAGdAVD0sWksw1RLITIEdcgVu4xDF8NqDavZ6h7WuulAseFLrcRurWUrbphjSh+MVsDQxgyMIvIRGQWQ74iIQn8Y4eMYyrjOIcNqflnqOA0rKVmlOVjRnMXSSIwuzrDnOpYYddicb8kaowtW0ytbrL1txO7GFs8B0bA4R26GLzs4Y0DbaHgnKWUq0FLO1lQkRHWx-v6yGHae0FPqTcudSxDR7uXSqeRlp13lDJWcMFVTYzRO3aMwBXy53XKfVuVKKbYBHJGQ8q9AqYl3uaioQWyA53EvMGaC1I5nGxvxiEiuGJyklOA+BjgYGFVdMbDUwg67NEBvgyy0DQb0MDywx+pNWEDlHMFvumVQ7j0KzVThmxlGdUzq5WqBdbGIy+gw8onBWwxm2DHQUwxja6mLq5RKjgh6l1SdXULK1AmC0VrLakW1HAtXeDTbpWTkb8mBV0-q09EY41ovmEp6Rf7b1xogeS-DHLapobfYxqzm680weQ4R8NKH5N8esUwuxvTNGX3EiF5Ncts19oI45ojznLG4b+DYhL-msL3WfIhjTNSNCeZi95zlJBhQQqi5JvTdGpMFZAfZ7j3y6Nqgq3h4rEYpONv7fR9BxRTiPpK-OsrkaYgdYOFxwY+WCk3taRMxFIGXD9dRBJmUCqnUGflgshpya8nDcjdWAbycAX9SdSyxJU2EVHc7ZNvbpqhLCm28cs744TNBDyw96LCKbnygbJeq7pxRVSua09hzx2UNgbuyh+dxrOhfaDYWjbAPOWHcB5D1lJ3PuDZZZKmVUr5V6Yx9D-7XKhKSuR18bzBqVWMve7j9H5PMfPbx0q5b-JI4Q5NdKuncPYexYSA4C7dPCfARZe607J22dg4WAL3nDrI3C5hyLoSYvGf1FlnmqH9Si3Bq26cFCyhhRlRmxBeX8A-70CJ3BR8G42wvjkEb-G8VwqofUsSYiRpBynu-aW9SPAgzjGYoQR8N5M3OODE76wvHaFLbnIWSzMLLKlBGeyYA1k2CJ3yUqcwUfswx+FQBSGRtoZx9CNmmFzp62MIuNwLrzaUnZixoUHX0n0+aGRYJrgtBy9dPwocSlNe6+CHbFgIwxETBcKvO1NvlhKzKi76XtgmAdr9-1BIfOhTNheWDRmTIUILynC8IkcS+ZgyDh8S45fZQChjPequCIaQjBCO6DiUQwBs9VpXxuag7JN63Hv5PCW1Svjj8xD8bwDRDYSSEtTjdpIyecKYG3U0fwFGIA24QcP+fwPYEvJqHfIoU4f8JMaQIAA","format":"rc"}],"flags":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}],"activeIndex":0,"editorSelection":{"width":0,"height":0,"offsetX":0,"offsetY":0,"data":[],"isActive":false}},"tilemap":{"activeIndex":0,"tilemaps":[{"name":"map_1","width":21,"height":14,"activeLayer":0,"layers":[{"isVisible":true,"data":"IwGgzGLArC0AwgCzhaMtRNKaB2KOADnDgNxIDYzCAmE0WgTkLEVBdqnah2UiwcaFQtVzlwY8BLAMoE4HJiFgLLAOR9onYXB35C0ErANY0yTMinAFlxSrX9C2brqPJdtWF1pTaEpA0XcVEPU2I4NxIucPdIcMDnLCjI2JZjAKCtCXdgEMZokGZWHli5RMEilJicwrKwmWouMBk6zKSq+pR6k0aqltY5NOcshsNHcNoNWhQa8c6+5tbDWpGO3FSZPjAY3SRZi2cpXL3R+JyVw0M6havz0JCY8qC1FgRDYCA","format":"rc"}]}]},"project":{"tileSize":16,"name":"std162798","screen":{"width":336,"height":224,"scaleMode":1,"scale":3,"minScale":1,"maxScale":4,"horizontalScaleCushion":10,"verticalScaleCushion":10,"rescaleOnWindowResize":true},"misc":{"hideCursor":false,"clickToBegin":true,"startTransitionFrames":60,"useNegativeMotivation":false},"editorVersion":"2.5.0","instructions":{"gameDescription":"","action1":"","action2":"","action3":"","action4":"","leftTrigger":"","rightTrigger":"","left":"","right":"","up":"","down":"","pause":""},"tileFlagsAreLocked":false},"code":{"scripts":[{"text":"\r\n// Globals\r\nlet inp = null; // input\r\nlet scr = null; // screen\r\nlet aud = null; // audio\r\n\r\n//Δημιουργούμε τις σταθερές του παίκτη. Σημείο spawn, Ταχύτητα βαδίσματος κτλ. \r\nconst player = {x: 90,y: 30,speed: 1.5,isWalking: false,flip: 0,framesSinceWalkStart: 0}\r\n\r\n//Αποθηκεύουμε τις σταθερές για τα μανιτάρια, Σημείο spawn & αν έχει καταναλωθεί\r\nconst mushrooms = [\r\n  {x: 224,y: 32,wasGrabbed: false},\r\n\t{x: 255,y: 160,wasGrabbed: false}\r\n];\r\n\r\n//Αποθηκεύουμε τις σταθερές για τα Δηλητηριώδη μανιτάρια, Σημείο spawn & αν έχει καταναλωθεί\r\nconst pmushrooms = [\r\n\t{x: 270,y: 128,wasGrabbed: false},\r\n\t{x: 270,y: 160,wasGrabbed: false},\r\n\t{x: 255,y: 180,wasGrabbed: false},\r\n\t{x: 255,y: 140,wasGrabbed: false},\r\n\t{x: 235,y: 160,wasGrabbed: false}\r\n];\r\n\r\n//Αποθηκεύουμε τις σταθερές για τις ζωές μας \r\nconst hearts = [\r\n\t{x: 10,y: 216,wasGrabbed: false},\r\n\t{x: 20,y: 216,wasGrabbed: false}\r\n];\r\n\r\n//Αποθηκεύουμε κάποιες μεταβλητές που μας χρησιμεύουν για τους ελέγχους του παιχνιδιού. Παράμετρο Νίκης, Ήττας, Αριθμό Μανιταριών \r\n//που καταναλώθηκαν κ.α.\r\nlet lost = false\r\nlet win = false\r\nlet numberOfGrabbedMushrooms = 0;\r\nlet numberOfGrabbedpMushrooms = 0;\r\nlet randomColor = 1;\r\n\r\n// Γίνεται αρχικοποίηση της μηχανής\r\nengine.onInit = () => {\r\n\tinp = engine.input;\r\n\tscr = engine.screen;\r\n\taud = engine.audio;\r\n\t\r\n\tupdateColors();\r\n};\r\n\r\n\r\n// Δημιουργία Update Loop\r\nengine.onUpdate = () => {\r\n  scr.clear( 1 );\r\n\r\n//Σχεδιάζουμε το χάρτη\r\n\tscr.drawMap(\r\n\t  0,      // originX on map\r\n\t  0,      // originY on map\r\n\t  -1,     // width\r\n\t  -1,     // height\r\n\t  0,      // screenX\r\n\t  0,      // screenY\r\n\t  0       // tilemap index\r\n\t);\r\n\r\n//Σχεδιάζουμε τα Δηλητηριώδη μανιτάρια, Τα απλά μανιτάρια & τις Ζωές μας\r\n\tdrawpMushrooms();\r\n\tdrawMushrooms();\r\n\tdrawHearts();\r\n\r\n//Στην περίπτωση που δεν έχουμε χάσει και έχουν περάσει 6 Sec από την αρχή του παιχνιδιού μπορεί ο παίκτης να κινηθεί\r\n//Εισάγαμε την καθυστέρηση των 6 sec για να διαβάσει ο παίκτης τις οδηγίες. όταν ικανοποιούνται οι συνθήκες\r\n// καλούμε την updatePlayer\r\n\tif (!lost && engine.realTimeSinceGameStart>6 && !win) {\r\n\t  updatePlayer();\r\n\t}\r\n\t\r\n// Original Code. Αποθηκεύουμε τη παράμετρο του χρώματος των γραμμάτων textMainColor και σε περίπτωση\r\n// Νίκης η textMainColor παίρνει random τιμή. ; Άφησα τον κώδικα μήπως τον χρησιμοποιήσω για λόγους αρχείου\r\n//\tlet textMainColor = 2;\r\n//\tif ( numberOfGrabbedMushrooms > 0 ) {\r\n//\t\ttextMainColor = randomColor;\r\n//\t}\r\n\r\n// Αντίστοιχα Original Code για τη κίνηση των γραμμάτων σε περίπτωση Νίκης. Έχω ενσωματώσει τις παραμέτρους\r\n// Απευθείας μέσα στο κώδικα για ευκολότερη κατανόηση. Άφησα τον αρχικό κώδικα μήπως τον χρησιμοποιήσω και λόγους\r\n// αρχείου\r\n//\tlet textPositionOffset = 0;\r\n///\tif ( numberOfGrabbedMushrooms > 1 ) {\r\n//\t\ttextPositionOffset = Math.sin( engine.realTimeSinceGameStart * 10 ) * 8;\r\n//\t}\r\n\t\r\n//Αν δεν έχεις χάσει και έχουν περάσει μέχρι 2 sec από την εκκίνηση τότε εμφανίζεται το μήνυμα καλωσορίσματος\r\n\tif (!lost && engine.realTimeSinceGameStart <2 ) {\r\n\t  scr.drawText('Welcome to Bitmelo!',110,110,2,1,0);\r\n\t}\r\n\r\n//Αν δεν έχεις χάσει και έχουν περάσει μέχρι 4 sec από την εκκίνηση τότε εμφανίζονται οδηγίες \t\r\n\tif (!lost && engine.realTimeSinceGameStart >2  && engine.realTimeSinceGameStart <4) {\r\n\t  scr.drawText('Eat the red Mushrooms',90,110,2,1,0);\r\n\t}\r\n\t\r\n//Αν δεν έχεις χάσει και έχουν περάσει μέχρι 6 sec από την εκκίνηση τότε εμφανίζονται οδηγίες \t\r\n\tif (!lost && engine.realTimeSinceGameStart >4  && engine.realTimeSinceGameStart <6) {\r\n\t  scr.drawText('DO NOT Eat the yellow mushrooms',70,110,2,1,0);\r\n\t}\t\r\n\r\n//Αν έχεις χάσει εμφανίζεται αντίστοιχο μήνυμα ότι έχασες και σου δίνει την επιλογή \r\n//να παίξεις ξανά πατώντας το κουμπί Α\tόπου και καλώ τη συνάρτηση reboot\r\n//επίσης σταματώ τον ήχο\r\n\tif (lost) {\r\n\t  scr.drawText('You Lost !!!',130,110,2,1,0);\r\n\t  scr.drawText('Want to Play Again?',110,90 + Math.floor(Math.sin( engine.realTimeSinceGameStart * 10 ) * 8),randomColor,1,0);\r\n\t  scr.drawText('Press A to restart',110,70 + Math.floor(Math.sin( engine.realTimeSinceGameStart * 10 ) * 8),randomColor,1,0);\r\n\t  aud.stopInfiniteSound( 0 );\r\n\t  if (engine.input.getKeyDown (bitmelo.Keys.A_KEY)) {\r\n\t    reboot()\r\n\t  }\r\n\t}\r\n\r\n//Αν έφαγες τα σωστά μανιτάρια και έχεις κερδίσει εμφανίζει το αντίστοιχο μήνυμα και σου \r\n//δίνει τη δυνατότητα να ξαναπαίξεις πατώντας το Α και καλώ τη συνάρτηση reboot\r\n//επίσης σταματώ τον ήχο\r\n\tif (win) {\r\n\t  scr.drawText('You Won !!!',130,110,2,1,0);\r\n\t  scr.drawText('Want to Play Again?',110,90 + Math.floor(Math.sin( engine.realTimeSinceGameStart * 10 ) * 8),randomColor,1,0);\r\n\t  scr.drawText('Press A to restart',110,70 + Math.floor(Math.sin( engine.realTimeSinceGameStart * 10 ) * 8),randomColor,1,0);\r\n\t  aud.stopInfiniteSound( 0 );\r\n\t  if (engine.input.getKeyDown (bitmelo.Keys.A_KEY)) {\r\n\t    reboot()\r\n\t  }\r\n\t}\r\n\r\n};\r\n\r\n//Σχεδιάζω τα μανιτάρια με αυτή τη συνάρτηση χρησιμοποιώντας το σωστό id \r\nfunction drawMushrooms() {\r\n\tmushrooms.forEach( mushroom => {\r\n\t\tif ( !mushroom.wasGrabbed ) {\r\n\t\t\tscr.drawTile(\r\n\t\t\t\t61,\r\n\t\t\t\tmushroom.x - 8, // center on the position\r\n\t\t\t\tmushroom.y - 8, // center on the position\r\n\t\t\t\t0\r\n\t\t\t);\r\n\t\t}\r\n\t} );\r\n}\r\n\r\n//Σχεδιάζω τα Δηλητηριώδη μανιτάρια με αυτή τη συνάρτηση χρησιμοποιώντας το σωστό id\r\nfunction drawpMushrooms() {\r\n\tpmushrooms.forEach( pmushroom => {\r\n\t\tif ( !pmushroom.wasGrabbed ) {\r\n\t\t\tscr.drawTile(\r\n\t\t\t\t63,\r\n\t\t\t\tpmushroom.x - 8, // center on the position\r\n\t\t\t\tpmushroom.y - 8, // center on the position\r\n\t\t\t\t0\r\n\t\t\t);\r\n\t\t}\r\n\t} );\r\n}\r\n\r\n//Σχεδιάζω τις καρδίες με αυτή τη συνάρτηση χρησιμοποιώντας το σωστό id\r\nfunction drawHearts() {\r\n\thearts.forEach( heart => {\r\n\t\tif ( !heart.wasGrabbed ) {\r\n\t\t\tscr.drawTile(\r\n\t\t\t\t8,\r\n\t\t\t\theart.x - 8, // center on the position\r\n\t\t\t\theart.y - 8, // center on the position\r\n\t\t\t\t0\r\n\t\t\t);\r\n\t\t}\r\n\t} );\r\n}\r\n\r\n//Η κεντρική συνάρτηση update player που διαχειρίζεται και ανανεώνει το παίκτη\r\nfunction updatePlayer() {\r\n\tlet newX = player.x;\r\n\tlet newY = player.y;\r\n\r\n//κίνηση προς τα αριστερά & προς τα δεξιά\t\r\n\tlet isWalking = false;\r\n\tif ( inp.left.pressed ) {\r\n\t\tnewX -= player.speed;\r\n\t\tisWalking = true;\r\n\t\tplayer.flip = 1;\r\n\t}\r\n\telse if ( inp.right.pressed ) {\r\n\t\tnewX += player.speed;\r\n\t\tisWalking = true;\r\n\t\tplayer.flip = 0;\r\n\t}\r\n//κίνηση κάτω και προς τα πάνω\t\r\n\tif ( inp.down.pressed ) {\r\n\t\tnewY -= player.speed;\r\n\t\tisWalking = true;\r\n\t}\r\n\telse if ( inp.up.pressed ) {\r\n\t\tnewY += player.speed;\r\n\t\tisWalking = true;\r\n\t}\r\n\r\n// update την κίνηση του παίκτη\t\r\n\tif ( isWalking ) {\r\n\t\tplayer.framesSinceWalkStart += 1;\r\n\t}\r\n\t\r\n\t// Αναπαραγωγή η σταμάτημα του ήχου ανάλογα με τη κίνηση του παίκτη και αν έχει φάει μανιτάρι\r\n\tif ( isWalking && !player.isWalking ) {\r\n\t\t// started walking\r\n\t\tplayer.framesSinceWalkStart = 0;\r\n\t\t\r\n\t\tlet note = bitmelo.Notes.C4;\r\n\t\tif ( numberOfGrabbedMushrooms > 1 ) {\r\n\t\t\tnote = bitmelo.Notes.C2;\r\n\t\t}\r\n\t\telse if ( numberOfGrabbedMushrooms > 0 ) {\r\n\t\t\tnote = bitmelo.Notes.C3;\r\n\t\t}\r\n\t\t\r\n\t\taud.playInfiniteSound(\r\n\t\t\t0,\r\n\t\t\tnote,\r\n\t\t\t0.5,\r\n\t\t\t2\r\n\t\t);\r\n\t}\r\n\telse if ( !isWalking && player.isWalking ) {\r\n\t\t// παύση ήχου όταν σταματήσει ο παίκτης\r\n\t\taud.stopInfiniteSound( 0 );\r\n\t}\r\n\t\r\n\tplayer.isWalking = isWalking;\r\n\r\n//Αρχικός κώδικας για να μην πέφτουμε πάνω στο φράχτη. Τον τροποποίησα παρακάτω για να μην πέσει ο παίκτης μέσα στη Λίμνη\t\r\n// make sure we are not colliding with the fence original code\r\n//\tif (newX >= 16 && newX < scr.width - 16 && newY >= 24 && newY < scr.height - 16) {\r\n//\t\tplayer.x = newX;\r\n//\t\tplayer.y = newY;\r\n//\t}\r\n\r\n//Τροποποίησα τον αρχικό κώδικα βάζοντας παραπάνω συνθήκες για να περιορίσω τον παίκτη μην πέσει μέσα στη Λίμνη\t\r\n\tif (newX<=255){\r\n\t  if(newX >= 16 && newX < scr.width - 16 && newY >= 24 && newY < scr.height - 16){\r\n\t    player.x = newX;\r\n\t\t  player.y = newY;\r\n\t  }\r\n\t}\r\n\telse {\r\n\t  if(newX >= 16 && newX < scr.width - 16 && newY >= 85 && newY < scr.height - 16){\r\n\t    player.x = newX;\r\n\t\t  player.y = newY;\r\n\t  }\r\n\t}\r\n\t\r\n\t// Έλεγχος για να ελέγξω αν ο παίκτης τρώει απλά μανιτάρια\r\n\tfor ( let i = 0; i < mushrooms.length; i += 1 ) {\r\n\t\tconst mushroom = mushrooms[i];\r\n\t\tif ( !mushroom.wasGrabbed ) {\r\n\t\t\tconst deltaX = Math.abs( player.x - mushroom.x );\r\n\t\t\tconst deltaY= Math.abs( player.y - mushroom.y );\r\n\t\t\tconst distance = Math.sqrt( deltaX * deltaX + deltaY * deltaY );\r\n\t\t\t\r\n\t\t\t// Ο παίκτης μόλις έφαγε ένα μανιτάρι. Άφησα τη default τιμή ίση με 16 έτσι ώστε να τρώει πιο εύκολα το κανονικό μανιτάρι\r\n\t\t\t// σε σχέση με το Δηλητηριώδη. Μόλις φάει ένα μανιτάρι αυξάνει τη παράμετρο numberOfGrabbedMushrooms κατά 1\r\n\t\t\tif ( distance <= 16 ) {\r\n\t\t\t\tmushroom.wasGrabbed = true;\r\n\t\t\t\tnumberOfGrabbedMushrooms += 1;\r\n\t\t\t\t\r\n\t\t\t\t//παίζει διαφορετικό ήχο ανάλογα με το είδος το μανιταριού που θα φάει \r\n\t\t\t\taud.playSound(1,bitmelo.Notes.E3,48,0.25,1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  \r\n  //\tΈλεγχος για να ελέγξω αν ο παίκτης τρώει Δηλητηριώδη μανιτάρια\r\n\tfor ( let i = 0; i < pmushrooms.length; i += 1 ) {\r\n\t\tconst pmushroom = pmushrooms[i];\r\n\t\tif ( !pmushroom.wasGrabbed ) {\r\n\t\t\tconst deltaX = Math.abs( player.x - pmushroom.x );\r\n\t\t\tconst deltaY= Math.abs( player.y - pmushroom.y );\r\n\t\t\tconst distance = Math.sqrt( deltaX * deltaX + deltaY * deltaY );\r\n\t\t\t\r\n\t\t\t// Ο παίκτης μόλις έφαγε ένα Δηλητηριώδη μανιτάρι. Μείωσα τη τιμή για να μπορεί ο παίκτης να μπορεί να φάει το \r\n\t\t\t//καλό μανιτάρι που βρίσκεται ανάμεσα στα Δηλητηριώδη. έπρεπε να βάλω ένα σημείο δυσκολίας\r\n\t\t\t//Μόλις φάει ένα Δηλητηριώδη μανιτάρι αυξάνει τη παράμετρο numberOfGrabbedpMushrooms κατά 1\r\n\t\t\tif ( distance <= 10 ) {\r\n\t\t\t\tpmushroom.wasGrabbed = true;\r\n\t\t\t\tnumberOfGrabbedpMushrooms += 1;\r\n\r\n        //παίζει διαφορετικό ήχο ανάλογα με το είδος το μανιταριού που θα φάει \r\n\t\t\t\taud.playSound(1,bitmelo.Notes.E7,48,0.25,1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n//Κάνει τους απαραίτητους ελέγχους Αν έχει φάει ένα Δηλητηριώδη μανιτάρι κάνει τη παράμετρο της δεύτερης καρδίας true.\r\n//Μόλις τη κάνει true η drawHearts αναγνωρίζει ότι είναι true και σταματάει να τη σχεδιάζει και άρα εξαφανίζεται απο την \r\n//οθόνη.\r\n\tif (numberOfGrabbedpMushrooms == 1){\r\n\t  hearts[1].wasGrabbed = true\r\n\t}\r\n\r\n//Στο δεύτερο if αν φάει και δεύτερο μανιτάρι σβήνει και τη δεύτερη καρδιά όπως τη πρώτη και στη συνέχεια κάνει \r\n//τη παράμετρο lost true για να σταματήσει το παιχνίδι. και παίζει και συγκεκριμένο ήχο που έχουμε φτιάξει στο sound editor\r\n\tif (numberOfGrabbedpMushrooms == 2){\r\n\t  hearts[0].wasGrabbed = true\r\n\t  lost = true\r\n\t  aud.playSound(3,bitmelo.Notes.E7,48,1,1);\r\n\t}\t\r\n\r\n//Στο τρίτο if \tόταν αναγνωρίσει ότι έφαγε δυο κανονικά μανιτάρια αναγνωρίζει συνθήκη νίκης και κάνει τη παράμετρο\r\n// win true. και παίζει και συγκεκριμένο ήχο που έχουμε φτιάξει στο sound editor\r\n\tif (numberOfGrabbedMushrooms == 2){\r\n\t  win = true\r\n\t  aud.playSound(2,bitmelo.Notes.E3,48,1,1);\r\n\t}\t\r\n\r\n\t// dΣχεδιασμός του παίκτη\r\n\tlet frameGID = 1;\r\n\tif ( player.isWalking ) {\r\n\t\tif ( player.framesSinceWalkStart % 16 < 8 ) {\r\n\t\t\tframeGID = 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tframeGID = 3;\r\n\t\t}\r\n\t}\r\n\t\r\n\tscr.drawTile(\r\n\t\tframeGID,\r\n\t\tMath.floor( player.x ) - 8, // center the tile on the position\r\n\t\tMath.floor( player.y ) - 8, // center the tile on the position\r\n\t\tplayer.flip\r\n\t);\r\n}\r\n\r\nfunction updateColors() {\r\n\trandomColor = Math.floor( Math.random() * 16 ) + 1;\r\n\tsetTimeout( updateColors, 100 );\r\n}\r\n\r\n//συνάρτηση reboot. Μόλις αναγνωρίσει τη συνθήκη της νίκης ή ήττας βγάζει το μήνυμα και με το πάτημα του κουμπιού Α \r\n// καλείτε η συνάρτηση reboot όπου ουσιαστικά μηδενίζεται η κατάσταση των ζωών, των Μανιταριών\r\n// και των Δηλητηριωδών μανιταριών σε wasGrabbed = false ότι δηλαδή δεν τα έχει φάει κανένας\r\n// Επίσης γίνεται reset στη κατάσταση νίκης και ήττας όπου γίνονται και οι δυο false μιας και δεν έχει \r\n//χάσει ακόμα ο παίκτης εφόσον συνεχίζεται το παιχνίδι. Επίσης μηδενίζονται οι μετρητές \r\n// numberOfGrabbedMushrooms & numberOfGrabbedpMushrooms για να γίνεται σωστά η μέτρηση των μανιταριών που έχουν καταναλωθεί\r\n// και τελικά αρχικοποιείται η θέση του παίκτη στο χάρτη. \r\nfunction reboot() {\r\n  hearts[0].wasGrabbed = false\r\n  hearts[1].wasGrabbed = false\r\n  pmushrooms[0].wasGrabbed = false\r\n  pmushrooms[1].wasGrabbed = false\r\n  pmushrooms[2].wasGrabbed = false\r\n  pmushrooms[3].wasGrabbed = false\r\n  pmushrooms[4].wasGrabbed = false\r\n  mushrooms[0].wasGrabbed = false\r\n  mushrooms[1].wasGrabbed = false\r\n  lost = false\r\n  win = false\r\n  numberOfGrabbedMushrooms = 0;\r\n  numberOfGrabbedpMushrooms = 0;\r\n  player.x = 90\r\n  player.y = 30\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","cursorRow":376,"cursorColumn":0,"scrollTop":0,"name":"Script0"}],"activeIndex":0,"playLogs":[]},"clipboard":{"pixels":{"width":0,"height":0,"offsetX":0,"offsetY":0,"data":[],"isActive":false}}}